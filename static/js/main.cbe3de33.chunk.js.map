{"version":3,"sources":["logo.svg","components/Button.jsx","components/Input.jsx","components/Clear.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","Input","input","Clear","handleClear","Footer","message","href","link","target","author","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addToInput","setState","state","handleEqual","math","_this2","src","logo","alt","Input_Input","Button_Button","Clear_Clear","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbe3de33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Button.css';\n\nconst isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \"+/-\";\n}\n\nexport const Button = props => (\n    <div className={`button-wrapper ${isOperator(props.children) ? null : \"operator\"}`} onClick={() => props.handleClick(props.children)}>\n        {props.children}\n    </div>\n);","import React from 'react';\nimport './Input.css';\n\nexport const Input = props => (\n    <div className=\"input\">\n        {props.input}\n    </div>\n);","import React from 'react';\nimport \"./Clear.css\";\n\nexport const Clear = props => (\n    <div className=\"clear-btn\" onClick={props.handleClear}>\n        {props.children}\n    </div>\n);","import React from 'react';\nimport './Footer.css';\n\nexport const Footer = props => (\n    <footer className=\"footerStyling\">\n        <p>{props.message} <a href={props.link} target=\"_blank\">{props.author}</a></p>\n    </footer>\n);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from './components/Button';\nimport { Input } from './components/Input';\nimport { Clear } from './components/Clear';\nimport { Footer } from './components/Footer';\nimport * as math from 'mathjs';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      input: ''\n    }\n  }\n\n  addToInput = val => {\n    this.setState({input: this.state.input + val });\n  }\n\n  handleEqual = () => {\n    this.setState({input: math.eval(this.state.input)});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <br/>\n\n          <div className=\"calc-wrapper\">\n          <Input input={this.state.input}></Input> \n            <div className=\"row\"> \n              <Button handleClick={this.addToInput}>7</Button>\n              <Button handleClick={this.addToInput}>8</Button>\n              <Button handleClick={this.addToInput}>9</Button>\n              <Button handleClick={this.addToInput}>/</Button>\n            </div>\n            <div className=\"row\"> \n              <Button handleClick={this.addToInput}>4</Button>\n              <Button handleClick={this.addToInput}>5</Button>\n              <Button handleClick={this.addToInput}>6</Button>\n              <Button handleClick={this.addToInput}>*</Button>\n            </div>\n            <div className=\"row\"> \n              <Button handleClick={this.addToInput}>1</Button>\n              <Button handleClick={this.addToInput}>2</Button>\n              <Button handleClick={this.addToInput}>3</Button>\n              <Button handleClick={this.addToInput}>+</Button>\n            </div>\n            <div className=\"row\"> \n              <Button handleClick={this.addToInput}>0.5</Button>\n              <Button handleClick={this.addToInput}>0</Button>\n              <Button handleClick={this.addToInput}>.</Button>\n              <Button handleClick={this.addToInput}>-</Button>\n            </div>\n            <div className=\"row\">\n              <Clear handleClear={() => this.setState({ input: \"\"})}>C</Clear>\n              <Button handleClick={() => this.handleEqual()}>=</Button>\n            </div>\n          </div>\n          <br/>\n          \n          <Footer message=\"Coded by\" author=\"Marcelo Mariduena\" link=\"https://github.com/marcelomariduena\"/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}